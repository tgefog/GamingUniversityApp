// <auto-generated />
using System;
using GamingUniversityApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamingUniversityApp.Data.Migrations
{
    [DbContext(typeof(GamingUniversityAppDbContext))]
    partial class GamingUniversityAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GamingUniversityApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("658c530c-6d7e-4bc5-956d-571166b579e3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a97d908-b7d5-432f-a58d-c16871cb3a6a",
                            Email = "lecturer1@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Lecturer",
                            LastName = "Lecturer",
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER1@ABV.BG",
                            NormalizedUserName = "LECTURER",
                            PasswordHash = "AQAAAAIAAYagAAAAENgcMSzNqVLi08qQNzBA3w0JD2yESuC5Tb9JBJbG/rambGP/h6eAJVFGr2pgf8oDcw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0aeefeb-a9e9-4ee5-bcae-4ae25ee6c28b",
                            TwoFactorEnabled = false,
                            UserName = "Lecturer"
                        },
                        new
                        {
                            Id = new Guid("1ee14426-147e-4d41-ad56-4c1388086c8a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae033818-87ef-40c0-a69d-075bb3957e86",
                            Email = "lecturer2@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Lecturer2",
                            LastName = "Lecturer2",
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER2@ABV.BG",
                            NormalizedUserName = "LECTURER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqYZbEkYjHE6AjFErxZ+o7fIlNKFY6qKWQ6gbUnmwVVkoHI4fmoP4fa2Pri8DjTSA==",
                            PhoneNumber = "98765",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "290de3c5-5407-4fea-9f6f-99dd4800f36c",
                            TwoFactorEnabled = false,
                            UserName = "Lecturer2"
                        },
                        new
                        {
                            Id = new Guid("25f228f7-d8d5-4a23-93fb-8b489ce206a1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05a6e8f7-f59f-41ea-a370-069be1ac07e1",
                            Email = "student1@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Student1",
                            LastName = "Student1",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@ABV.BG",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHpSxpMSdDR3G8wYrqzbe/tzuil+FxFKc1NwjtphwYWPzW8fvCg6vc/RRsOsFawQA==",
                            PhoneNumber = "12345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edf61d1b-755c-4a5f-88ab-1092446f9888",
                            TwoFactorEnabled = false,
                            UserName = "Student1"
                        },
                        new
                        {
                            Id = new Guid("284bd583-dd2c-4453-98fa-74236f9cdcf9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f90b954f-1916-41ff-91cf-9155a540feca",
                            Email = "student2@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Student2",
                            LastName = "Student2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@ABV.BG",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcg8g8oz7zt9vRIw2E6RBn8f4+N52udtCt6vATwlQOnFJ3TJymdBPBnH7VEUkywww==",
                            PhoneNumber = "13345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efc14b1e-dbcb-4d41-8b67-f2a53629bf69",
                            TwoFactorEnabled = false,
                            UserName = "Student2"
                        },
                        new
                        {
                            Id = new Guid("79cda038-04b2-4333-a6b5-8fff05f5df8c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7600aec-24ea-4027-ae1d-065dfd95ef61",
                            Email = "student3@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Student3",
                            LastName = "Student3",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@ABV.BG",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEBNU91Z6wBSEjhGTu+k2zhuoYR26CmnxZbTiWJuofjg95r7/PvGpEAL0Ru2d71FY/Q==",
                            PhoneNumber = "12245",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23255884-a37b-4166-ab7f-116213ed5d56",
                            TwoFactorEnabled = false,
                            UserName = "Student3"
                        });
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the course that the assignment belongs to");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Description of the assignment");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Due date for this assignment");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the assignment");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af6d1a97-74c4-4c9f-befe-8f6dbb45269f"),
                            CourseId = new Guid("a3841c0b-3660-4398-93f5-f606e7d5bf60"),
                            Description = "Learn the basics of lane control, farming, and map awareness in League of Legends.",
                            DueDate = new DateTime(2024, 12, 11, 17, 27, 6, 203, DateTimeKind.Utc).AddTicks(4174),
                            IsDeleted = false,
                            Name = "Introduction to League Mechanics"
                        },
                        new
                        {
                            Id = new Guid("4da79f7f-bb60-4d24-8992-1b2ed252f64f"),
                            CourseId = new Guid("61088dab-2ca0-4258-b7fa-5737ce436ff2"),
                            Description = "Understand team strategies and map control in Counter-Strike.",
                            DueDate = new DateTime(2024, 12, 18, 17, 27, 6, 203, DateTimeKind.Utc).AddTicks(4189),
                            IsDeleted = false,
                            Name = "Counter-Strike Tactics"
                        });
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the course");

                    b.Property<int>("Credits")
                        .HasColumnType("int")
                        .HasComment("Amount of credits given to students for completing the course");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Course description");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasDefaultValue("/images/No_Image_Available.jpg");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3841c0b-3660-4398-93f5-f606e7d5bf60"),
                            CourseName = "League of Legends",
                            Credits = 25,
                            Description = "League of Legends is a multiplayer online battle arena (MOBA) game in which the player controls a character (\"champion\") with a set of unique abilities from an isometric perspective. As of 2024, there are 168 champions available to play. Over the course of a match, champions gain levels by accruing experience points (XP) through killing enemies. Items can be acquired to increase champions' strength, and are bought with gold, which players accrue passively over time and earn actively by defeating the opposing team's minions, champions, or defensive structures. In the main game mode, Summoner's Rift, items are purchased through a shop menu available to players only when their champion is in the team's base. Each match is discrete; levels and items do not transfer from one match to another.",
                            IsDeleted = false,
                            LecturerId = new Guid("eb9a19de-0b05-48f5-9c2f-dbab7ed332b6")
                        },
                        new
                        {
                            Id = new Guid("61088dab-2ca0-4258-b7fa-5737ce436ff2"),
                            CourseName = "Counter Strike",
                            Credits = 30,
                            Description = "Counter-Strike is an objective-based, multiplayer tactical first-person shooter. Two opposing teams—the Terrorists and the Counter Terrorists—compete in game modes to complete objectives, such as securing a location to plant or defuse a bomb and rescuing or guarding hostages. At the end of each round, players are rewarded based on their individual performance with in-game currency to spend on more powerful weapons in subsequent rounds. Winning rounds results in more money than losing and completing objectives such as killing enemy players gives cash bonuses.Uncooperative actions, such as killing teammates, result in a penalty.",
                            IsDeleted = false,
                            LecturerId = new Guid("cc5a700b-076e-4c88-b8ad-5ebe548735a0")
                        });
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Lecturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc5a700b-076e-4c88-b8ad-5ebe548735a0"),
                            Department = "FPS",
                            UserId = new Guid("658c530c-6d7e-4bc5-956d-571166b579e3"),
                            WorkPhoneNumber = "12345678"
                        },
                        new
                        {
                            Id = new Guid("eb9a19de-0b05-48f5-9c2f-dbab7ed332b6"),
                            Department = "Moba",
                            UserId = new Guid("1ee14426-147e-4d41-ad56-4c1388086c8a"),
                            WorkPhoneNumber = "87654321"
                        });
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9250c8b9-66e5-4a04-b26d-a02203cd0ca2"),
                            UserId = new Guid("25f228f7-d8d5-4a23-93fb-8b489ce206a1")
                        },
                        new
                        {
                            Id = new Guid("56d668ca-324c-4e54-90d2-800fa38d932a"),
                            UserId = new Guid("284bd583-dd2c-4453-98fa-74236f9cdcf9")
                        },
                        new
                        {
                            Id = new Guid("fbceacec-0bf1-48eb-a473-f7f7c4f17e4b"),
                            UserId = new Guid("79cda038-04b2-4333-a6b5-8fff05f5df8c")
                        });
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.StudentCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the course");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the student");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the assignment");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Content of the submission");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Grade for the submission");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the student");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the submission");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cff8ba3e-3f3c-4c4d-9883-57f819e23509"),
                            AssignmentId = new Guid("af6d1a97-74c4-4c9f-befe-8f6dbb45269f"),
                            Content = "Completed the map awareness module.",
                            Grade = "A",
                            StudentId = new Guid("9250c8b9-66e5-4a04-b26d-a02203cd0ca2"),
                            SubmissionDate = new DateTime(2024, 11, 26, 17, 27, 6, 205, DateTimeKind.Utc).AddTicks(9440)
                        },
                        new
                        {
                            Id = new Guid("12aa74f9-2589-496d-99c9-7746f32ede7e"),
                            AssignmentId = new Guid("4da79f7f-bb60-4d24-8992-1b2ed252f64f"),
                            Content = "Submitted the team strategy report.",
                            Grade = "B+",
                            StudentId = new Guid("56d668ca-324c-4e54-90d2-800fa38d932a"),
                            SubmissionDate = new DateTime(2024, 11, 27, 17, 27, 6, 205, DateTimeKind.Utc).AddTicks(9451)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Assignment", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Course", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.Lecturer", "Lecturer")
                        .WithMany("Courses")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Lecturer", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Student", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.StudentCourse", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GamingUniversityApp.Data.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Submission", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GamingUniversityApp.Data.Models.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingUniversityApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GamingUniversityApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Lecturer", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("GamingUniversityApp.Data.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
